var Fiber = Npm.require('fibers');InitialIronMeta = {  _routes: [],  _onAllRoutes: []};InitialIronMeta._onAllRoutes = [];InitialIronMeta.frContext = new Meteor.EnvironmentVariable();var ironMetaRoutes = Picker.filter(function(req, res) {  return IsAppUrl(req) && Inject.appUrl(req.url);});ironMetaRoutes.middleware(function(req, res, next) {  InitialIronMeta.handleOnAllRoutes(req, res, next);});// handling specific routesInitialIronMeta.route = function route(path, callback) {  if(path.indexOf('/') !== 0){    throw new Error('Error: path (' + path + ') must begin with a leading slash "/"')  }  ironMetaRoutes.route(path, InitialIronMeta.handleRoute.bind(null, callback));};function nextCallback(res, next) {  return function() {     next();  };}InitialIronMeta.handleRoute = function(processingCallback, params, req, res, next) {  var afterProcessed = nextCallback(res, next);  var metaData = processingCallback.call(null, params, req.url);  if (!metaData)    metaData = {};  if (Meteor.isServer) {      if (!Package.appcache){        _.each(metaData, function(val, key){            Inject.meta(key, val, res);        });      }  }  next();};InitialIronMeta.handleOnAllRoutes = function(req, res, next) {  var afterProcessed =  nextCallback(res, next);  InitialIronMeta._processAllRoutes(req, afterProcessed);};InitialIronMeta.onAllRoutes = function onAllRoutes(callback) {  InitialIronMeta._onAllRoutes.push(callback);};InitialIronMeta._processAllRoutes =  function _processAllRoutes(req, callback) {  callback = callback || function() {};  var path = req.url;  var headers = req.headers;  new Fiber(function() {    var context = { headers: headers };    try {      InitialIronMeta._onAllRoutes.forEach(function(callback) {        callback.call(context, path);      });      callback(null);    } catch(err) {      handleError(err, path, callback);    }  }).run();};function handleError(err, path, callback) {  var message =    'error on fast-meta path: ' +    path +    " ; error: " + err.stack;  console.error(message);  callback(null);}// meteor algorithm to check if this is a meteor serving http request or notIsAppUrl = function (req) {  var url = req.url  if(url === '/favicon.ico' || url === '/robots.txt') {    console.log('favicon or robot - failed');    return false;  }  // NOTE: app.manifest is not a web standard like favicon.ico and  // robots.txt. It is a file name we have chosen to use for HTML5  // appcache URLs. It is included here to prevent using an appcache  // then removing it from poisoning an app permanently. Eventually,  // once we have server side routing, this won't be needed as  // unknown URLs with return a 404 automatically.  if(url === '/app.manifest') {    console.log('appmanifest failure');    return false;  }  // Avoid serving app HTML for declared routes such as /sockjs/.  if(RoutePolicy.classify(url)) {    console.log('RoutePolicy - Failed');    return false;  }  return (/html/.test(req.headers['accept']) || /^\*\/\*$/.test(req.headers['accept']));};